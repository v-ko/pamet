# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'widget.ui'
##
## Created by: Qt User Interface Compiler version 6.3.1
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QHBoxLayout, QMainWindow, QMenu,
    QMenuBar, QSizePolicy, QTabWidget, QVBoxLayout,
    QWidget)

class Ui_BrowserWindow(object):
    def setupUi(self, BrowserWindow):
        if not BrowserWindow.objectName():
            BrowserWindow.setObjectName(u"BrowserWindow")
        BrowserWindow.resize(800, 600)
        self.actionNew_page = QAction(BrowserWindow)
        self.actionNew_page.setObjectName(u"actionNew_page")
        self.actionGo_to_page = QAction(BrowserWindow)
        self.actionGo_to_page.setObjectName(u"actionGo_to_page")
        self.actionRefresh = QAction(BrowserWindow)
        self.actionRefresh.setObjectName(u"actionRefresh")
        self.actionPageProperties = QAction(BrowserWindow)
        self.actionPageProperties.setObjectName(u"actionPageProperties")
        self.actionNew_note = QAction(BrowserWindow)
        self.actionNew_note.setObjectName(u"actionNew_note")
        self.actionEdit_note = QAction(BrowserWindow)
        self.actionEdit_note.setObjectName(u"actionEdit_note")
        self.actionDelete_selected = QAction(BrowserWindow)
        self.actionDelete_selected.setObjectName(u"actionDelete_selected")
        self.actionColorSelectedRed = QAction(BrowserWindow)
        self.actionColorSelectedRed.setObjectName(u"actionColorSelectedRed")
        self.actionColorSelectedGreen = QAction(BrowserWindow)
        self.actionColorSelectedGreen.setObjectName(u"actionColorSelectedGreen")
        self.actionColorSelectedBlue = QAction(BrowserWindow)
        self.actionColorSelectedBlue.setObjectName(u"actionColorSelectedBlue")
        self.actionColorSelectedBlack = QAction(BrowserWindow)
        self.actionColorSelectedBlack.setObjectName(u"actionColorSelectedBlack")
        self.actionRemove_background = QAction(BrowserWindow)
        self.actionRemove_background.setObjectName(u"actionRemove_background")
        self.actionRed_shift = QAction(BrowserWindow)
        self.actionRed_shift.setObjectName(u"actionRed_shift")
        self.actionGreen_shift = QAction(BrowserWindow)
        self.actionGreen_shift.setObjectName(u"actionGreen_shift")
        self.actionBlue_shift = QAction(BrowserWindow)
        self.actionBlue_shift.setObjectName(u"actionBlue_shift")
        self.actionBlack_shift = QAction(BrowserWindow)
        self.actionBlack_shift.setObjectName(u"actionBlack_shift")
        self.actionTransparency_shift = QAction(BrowserWindow)
        self.actionTransparency_shift.setObjectName(u"actionTransparency_shift")
        self.actionGlobal_search = QAction(BrowserWindow)
        self.actionGlobal_search.setObjectName(u"actionGlobal_search")
        self.actionOpen_command_palette = QAction(BrowserWindow)
        self.actionOpen_command_palette.setObjectName(u"actionOpen_command_palette")
        self.actionGo_to_file = QAction(BrowserWindow)
        self.actionGo_to_file.setObjectName(u"actionGo_to_file")
        self.actionOpen_user_settings = QAction(BrowserWindow)
        self.actionOpen_user_settings.setObjectName(u"actionOpen_user_settings")
        self.actionOpen_repo_settings = QAction(BrowserWindow)
        self.actionOpen_repo_settings.setObjectName(u"actionOpen_repo_settings")
        self.actionExport_as_static_web_page_beta = QAction(BrowserWindow)
        self.actionExport_as_static_web_page_beta.setObjectName(u"actionExport_as_static_web_page_beta")
        self.actionGrab_screen_snippet = QAction(BrowserWindow)
        self.actionGrab_screen_snippet.setObjectName(u"actionGrab_screen_snippet")
        self.actionForward = QAction(BrowserWindow)
        self.actionForward.setObjectName(u"actionForward")
        self.actionBack = QAction(BrowserWindow)
        self.actionBack.setObjectName(u"actionBack")
        self.actionToggle = QAction(BrowserWindow)
        self.actionToggle.setObjectName(u"actionToggle")
        self.actionHelp = QAction(BrowserWindow)
        self.actionHelp.setObjectName(u"actionHelp")
        self.actionAbout = QAction(BrowserWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        self.actionCopy = QAction(BrowserWindow)
        self.actionCopy.setObjectName(u"actionCopy")
        self.actionPaste = QAction(BrowserWindow)
        self.actionPaste.setObjectName(u"actionPaste")
        self.actionPaste_special = QAction(BrowserWindow)
        self.actionPaste_special.setObjectName(u"actionPaste_special")
        self.actionCut = QAction(BrowserWindow)
        self.actionCut.setObjectName(u"actionCut")
        self.actionAutosize = QAction(BrowserWindow)
        self.actionAutosize.setObjectName(u"actionAutosize")
        self.actionUndo = QAction(BrowserWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        self.actionRedo = QAction(BrowserWindow)
        self.actionRedo.setObjectName(u"actionRedo")
        self.actionCreate_arrow = QAction(BrowserWindow)
        self.actionCreate_arrow.setObjectName(u"actionCreate_arrow")
        self.actionSelect_all = QAction(BrowserWindow)
        self.actionSelect_all.setObjectName(u"actionSelect_all")
        self.actionOpen_page_backups_folder = QAction(BrowserWindow)
        self.actionOpen_page_backups_folder.setObjectName(u"actionOpen_page_backups_folder")
        self.actionOpen_repo_folder = QAction(BrowserWindow)
        self.actionOpen_repo_folder.setObjectName(u"actionOpen_repo_folder")
        self.centralwidget = QWidget(BrowserWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.horizontalLayout_2 = QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.mainLayout = QVBoxLayout()
        self.mainLayout.setObjectName(u"mainLayout")
        self.tabBarWidget = QTabWidget(self.centralwidget)
        self.tabBarWidget.setObjectName(u"tabBarWidget")
        self.tabBarWidget.setTabsClosable(True)
        self.tabBarWidget.setMovable(True)

        self.mainLayout.addWidget(self.tabBarWidget)


        self.horizontalLayout_2.addLayout(self.mainLayout)

        BrowserWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QMenuBar(BrowserWindow)
        self.menuBar.setObjectName(u"menuBar")
        self.menuBar.setGeometry(QRect(0, 0, 800, 30))
        self.menuPage = QMenu(self.menuBar)
        self.menuPage.setObjectName(u"menuPage")
        self.menuEdit = QMenu(self.menuBar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuColor = QMenu(self.menuEdit)
        self.menuColor.setObjectName(u"menuColor")
        self.menuOther = QMenu(self.menuBar)
        self.menuOther.setObjectName(u"menuOther")
        self.menuNavigation = QMenu(self.menuOther)
        self.menuNavigation.setObjectName(u"menuNavigation")
        BrowserWindow.setMenuBar(self.menuBar)

        self.menuBar.addAction(self.menuPage.menuAction())
        self.menuBar.addAction(self.menuEdit.menuAction())
        self.menuBar.addAction(self.menuOther.menuAction())
        self.menuPage.addAction(self.actionNew_page)
        self.menuPage.addAction(self.actionGo_to_page)
        self.menuPage.addSeparator()
        self.menuPage.addAction(self.actionPageProperties)
        self.menuPage.addAction(self.actionOpen_page_backups_folder)
        self.menuPage.addSeparator()
        self.menuPage.addAction(self.actionExport_as_static_web_page_beta)
        self.menuPage.addAction(self.actionRefresh)
        self.menuEdit.addAction(self.actionNew_note)
        self.menuEdit.addAction(self.actionCreate_arrow)
        self.menuEdit.addAction(self.actionEdit_note)
        self.menuEdit.addAction(self.actionSelect_all)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addAction(self.actionPaste_special)
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionDelete_selected)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionAutosize)
        self.menuEdit.addAction(self.menuColor.menuAction())
        self.menuColor.addAction(self.actionColorSelectedBlue)
        self.menuColor.addAction(self.actionColorSelectedGreen)
        self.menuColor.addAction(self.actionColorSelectedRed)
        self.menuColor.addAction(self.actionColorSelectedBlack)
        self.menuColor.addAction(self.actionRemove_background)
        self.menuColor.addSeparator()
        self.menuColor.addAction(self.actionBlue_shift)
        self.menuColor.addAction(self.actionGreen_shift)
        self.menuColor.addAction(self.actionRed_shift)
        self.menuColor.addAction(self.actionBlack_shift)
        self.menuColor.addAction(self.actionTransparency_shift)
        self.menuOther.addAction(self.actionGrab_screen_snippet)
        self.menuOther.addAction(self.actionGlobal_search)
        self.menuOther.addAction(self.actionOpen_command_palette)
        self.menuOther.addAction(self.actionOpen_repo_folder)
        self.menuOther.addSeparator()
        self.menuOther.addAction(self.actionOpen_user_settings)
        self.menuOther.addAction(self.actionOpen_repo_settings)
        self.menuOther.addAction(self.menuNavigation.menuAction())
        self.menuOther.addSeparator()
        self.menuOther.addAction(self.actionHelp)
        self.menuOther.addAction(self.actionAbout)
        self.menuNavigation.addAction(self.actionForward)
        self.menuNavigation.addAction(self.actionBack)
        self.menuNavigation.addAction(self.actionToggle)

        self.retranslateUi(BrowserWindow)

        QMetaObject.connectSlotsByName(BrowserWindow)
    # setupUi

    def retranslateUi(self, BrowserWindow):
        BrowserWindow.setWindowTitle(QCoreApplication.translate("BrowserWindow", u"MainWindow", None))
        self.actionNew_page.setText(QCoreApplication.translate("BrowserWindow", u"New page", None))
#if QT_CONFIG(shortcut)
        self.actionNew_page.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionGo_to_page.setText(QCoreApplication.translate("BrowserWindow", u"Go to page", None))
#if QT_CONFIG(shortcut)
        self.actionGo_to_page.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionRefresh.setText(QCoreApplication.translate("BrowserWindow", u"Refresh", None))
#if QT_CONFIG(shortcut)
        self.actionRefresh.setShortcut(QCoreApplication.translate("BrowserWindow", u"F5", None))
#endif // QT_CONFIG(shortcut)
        self.actionPageProperties.setText(QCoreApplication.translate("BrowserWindow", u"Properties", None))
#if QT_CONFIG(shortcut)
        self.actionPageProperties.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionNew_note.setText(QCoreApplication.translate("BrowserWindow", u"New note", None))
#if QT_CONFIG(shortcut)
        self.actionNew_note.setShortcut(QCoreApplication.translate("BrowserWindow", u"N", None))
#endif // QT_CONFIG(shortcut)
        self.actionEdit_note.setText(QCoreApplication.translate("BrowserWindow", u"Edit note", None))
#if QT_CONFIG(shortcut)
        self.actionEdit_note.setShortcut(QCoreApplication.translate("BrowserWindow", u"E", None))
#endif // QT_CONFIG(shortcut)
        self.actionDelete_selected.setText(QCoreApplication.translate("BrowserWindow", u"Delete selected", None))
#if QT_CONFIG(shortcut)
        self.actionDelete_selected.setShortcut(QCoreApplication.translate("BrowserWindow", u"Del", None))
#endif // QT_CONFIG(shortcut)
        self.actionColorSelectedRed.setText(QCoreApplication.translate("BrowserWindow", u"Red", None))
#if QT_CONFIG(shortcut)
        self.actionColorSelectedRed.setShortcut(QCoreApplication.translate("BrowserWindow", u"3", None))
#endif // QT_CONFIG(shortcut)
        self.actionColorSelectedGreen.setText(QCoreApplication.translate("BrowserWindow", u"Green", None))
#if QT_CONFIG(shortcut)
        self.actionColorSelectedGreen.setShortcut(QCoreApplication.translate("BrowserWindow", u"2", None))
#endif // QT_CONFIG(shortcut)
        self.actionColorSelectedBlue.setText(QCoreApplication.translate("BrowserWindow", u"Blue", None))
#if QT_CONFIG(shortcut)
        self.actionColorSelectedBlue.setShortcut(QCoreApplication.translate("BrowserWindow", u"1", None))
#endif // QT_CONFIG(shortcut)
        self.actionColorSelectedBlack.setText(QCoreApplication.translate("BrowserWindow", u"Black", None))
#if QT_CONFIG(shortcut)
        self.actionColorSelectedBlack.setShortcut(QCoreApplication.translate("BrowserWindow", u"4", None))
#endif // QT_CONFIG(shortcut)
        self.actionRemove_background.setText(QCoreApplication.translate("BrowserWindow", u"Remove background", None))
#if QT_CONFIG(shortcut)
        self.actionRemove_background.setShortcut(QCoreApplication.translate("BrowserWindow", u"5", None))
#endif // QT_CONFIG(shortcut)
        self.actionRed_shift.setText(QCoreApplication.translate("BrowserWindow", u"Red shift", None))
#if QT_CONFIG(shortcut)
        self.actionRed_shift.setShortcut(QCoreApplication.translate("BrowserWindow", u"Shift+3", None))
#endif // QT_CONFIG(shortcut)
        self.actionGreen_shift.setText(QCoreApplication.translate("BrowserWindow", u"Green shift", None))
#if QT_CONFIG(shortcut)
        self.actionGreen_shift.setShortcut(QCoreApplication.translate("BrowserWindow", u"Shift+2", None))
#endif // QT_CONFIG(shortcut)
        self.actionBlue_shift.setText(QCoreApplication.translate("BrowserWindow", u"Blue shift", None))
#if QT_CONFIG(shortcut)
        self.actionBlue_shift.setShortcut(QCoreApplication.translate("BrowserWindow", u"Shift+1", None))
#endif // QT_CONFIG(shortcut)
        self.actionBlack_shift.setText(QCoreApplication.translate("BrowserWindow", u"Black shift", None))
#if QT_CONFIG(shortcut)
        self.actionBlack_shift.setShortcut(QCoreApplication.translate("BrowserWindow", u"Shift+4", None))
#endif // QT_CONFIG(shortcut)
        self.actionTransparency_shift.setText(QCoreApplication.translate("BrowserWindow", u"Transparency shift", None))
#if QT_CONFIG(shortcut)
        self.actionTransparency_shift.setShortcut(QCoreApplication.translate("BrowserWindow", u"Shift+5", None))
#endif // QT_CONFIG(shortcut)
        self.actionGlobal_search.setText(QCoreApplication.translate("BrowserWindow", u"Global search", None))
#if QT_CONFIG(shortcut)
        self.actionGlobal_search.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+Shift+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen_command_palette.setText(QCoreApplication.translate("BrowserWindow", u"Open command palette", None))
#if QT_CONFIG(shortcut)
        self.actionOpen_command_palette.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+Shift+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionGo_to_file.setText(QCoreApplication.translate("BrowserWindow", u"Go to file", None))
        self.actionOpen_user_settings.setText(QCoreApplication.translate("BrowserWindow", u"Open user settings", None))
        self.actionOpen_repo_settings.setText(QCoreApplication.translate("BrowserWindow", u"Open repo settings", None))
        self.actionExport_as_static_web_page_beta.setText(QCoreApplication.translate("BrowserWindow", u"Export as static web page (beta)", None))
        self.actionGrab_screen_snippet.setText(QCoreApplication.translate("BrowserWindow", u"Grab screen snippet", None))
#if QT_CONFIG(shortcut)
        self.actionGrab_screen_snippet.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionForward.setText(QCoreApplication.translate("BrowserWindow", u"Forward", None))
#if QT_CONFIG(shortcut)
        self.actionForward.setShortcut(QCoreApplication.translate("BrowserWindow", u"Alt+Right", None))
#endif // QT_CONFIG(shortcut)
        self.actionBack.setText(QCoreApplication.translate("BrowserWindow", u"Back", None))
#if QT_CONFIG(shortcut)
        self.actionBack.setShortcut(QCoreApplication.translate("BrowserWindow", u"Alt+Left", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle.setText(QCoreApplication.translate("BrowserWindow", u"Toggle", None))
#if QT_CONFIG(shortcut)
        self.actionToggle.setShortcut(QCoreApplication.translate("BrowserWindow", u"Backspace", None))
#endif // QT_CONFIG(shortcut)
        self.actionHelp.setText(QCoreApplication.translate("BrowserWindow", u"Help", None))
#if QT_CONFIG(shortcut)
        self.actionHelp.setShortcut(QCoreApplication.translate("BrowserWindow", u"F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionAbout.setText(QCoreApplication.translate("BrowserWindow", u"About", None))
        self.actionCopy.setText(QCoreApplication.translate("BrowserWindow", u"Copy", None))
#if QT_CONFIG(shortcut)
        self.actionCopy.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste.setText(QCoreApplication.translate("BrowserWindow", u"Paste", None))
#if QT_CONFIG(shortcut)
        self.actionPaste.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste_special.setText(QCoreApplication.translate("BrowserWindow", u"Paste special", None))
#if QT_CONFIG(shortcut)
        self.actionPaste_special.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+Shift+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionCut.setText(QCoreApplication.translate("BrowserWindow", u"Cut", None))
#if QT_CONFIG(shortcut)
        self.actionCut.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionAutosize.setText(QCoreApplication.translate("BrowserWindow", u"Autosize", None))
#if QT_CONFIG(shortcut)
        self.actionAutosize.setShortcut(QCoreApplication.translate("BrowserWindow", u"A", None))
#endif // QT_CONFIG(shortcut)
        self.actionUndo.setText(QCoreApplication.translate("BrowserWindow", u"Undo", None))
#if QT_CONFIG(shortcut)
        self.actionUndo.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedo.setText(QCoreApplication.translate("BrowserWindow", u"Redo", None))
#if QT_CONFIG(shortcut)
        self.actionRedo.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+Shift+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionCreate_arrow.setText(QCoreApplication.translate("BrowserWindow", u"Create arrow", None))
#if QT_CONFIG(shortcut)
        self.actionCreate_arrow.setShortcut(QCoreApplication.translate("BrowserWindow", u"L", None))
#endif // QT_CONFIG(shortcut)
        self.actionSelect_all.setText(QCoreApplication.translate("BrowserWindow", u"Select all", None))
#if QT_CONFIG(shortcut)
        self.actionSelect_all.setShortcut(QCoreApplication.translate("BrowserWindow", u"Ctrl+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen_page_backups_folder.setText(QCoreApplication.translate("BrowserWindow", u"Open backups folder", None))
        self.actionOpen_repo_folder.setText(QCoreApplication.translate("BrowserWindow", u"Open repository folder", None))
        self.menuPage.setTitle(QCoreApplication.translate("BrowserWindow", u"Page", None))
        self.menuEdit.setTitle(QCoreApplication.translate("BrowserWindow", u"Edit", None))
        self.menuColor.setTitle(QCoreApplication.translate("BrowserWindow", u"Color", None))
        self.menuOther.setTitle(QCoreApplication.translate("BrowserWindow", u"Other", None))
        self.menuNavigation.setTitle(QCoreApplication.translate("BrowserWindow", u"Navigation", None))
    # retranslateUi

