#!/usr/bin/env python

import os
import signal

from PySide2.QtCore import QTimer

import misli
from misli import logging, MainLoop
from misli.gui import update_components_from_changes
from misli.gui.desktop import usecases
from misli.gui.desktop.config import get_config

from misli.services.file_system_storage import FSStorageRepository
from misli.services.file_system_storage import save_changes

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)
signal.signal(signal.SIGINT, signal.SIG_DFL)


class QtMainLoop(MainLoop):
    def call_delayed(self, callback, delay=0):
        QTimer.singleShot(delay * 1000, callback)


def main():
    # Init the app
    config = get_config()
    repo_path = config['repository_path']

    # # Testing - restore repo changes
    # for f in os.scandir(repo_path):
    #     if f.name.endswith('backup'):
    #         os.rename(f.path, f.path[:-7])

    #     if f.name.endswith('misl.json'):
    #         os.remove(f.path)

    if os.path.exists(repo_path):
        fs_repo = FSStorageRepository.open(repo_path)
    else:
        fs_repo = FSStorageRepository.create(repo_path)

    if not fs_repo:
        log.error('Error initializing repository. Exiting.')
        return

    misli.set_repo(fs_repo)
    misli.set_main_loop(QtMainLoop())
    misli.on_change(update_components_from_changes)
    misli.on_change(save_changes)

    misli.line_spacing_in_pixels = 20

    desktop_app = misli.gui.create_component('DesktopApp', parent_id='')
    usecases.new_browser_window_ensure_page()
    desktop_app.exec_()


if __name__ == '__main__':
    main()
