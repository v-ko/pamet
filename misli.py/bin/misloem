#!/usr/bin/env python

import os
import signal

from PySide2.QtCore import QTimer

from misli import misli, logging
from misli.gui import components_lib
from misli.gui.desktop import usecases
from misli.gui.desktop.app import DesktopApp
from misli.gui.desktop.config import get_config

from misli.services.file_system_storage import FSStorageRepository

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)
signal.signal(signal.SIGINT, signal.SIG_DFL)


def call_delayed(callback, delay=0):
    QTimer.singleShot(delay * 1000, callback)


def main():
    # Init the app
    config = get_config()
    repo_path = config['repository_path']

    if os.path.exists(repo_path):
        fs_repo = FSStorageRepository.open(repo_path)
    else:
        fs_repo = FSStorageRepository.create(repo_path)

    if not fs_repo:
        log.error('Error initializing repository. Exiting.')
        return

    misli.set_repo(fs_repo)
    misli.set_components_lib(components_lib)
    misli.call_delayed = call_delayed

    misli.line_spacing_in_pixels = 20

    desktop_app = DesktopApp()
    misli.set_desktop_app(desktop_app)
    usecases.new_browser_window_ensure_page()
    desktop_app.exec_()


if __name__ == '__main__':
    main()
