#!/usr/bin/env python

import os
import signal

import misli
from misli.gui import update_components_from_changes
from misli.gui.desktop import usecases, QtMainLoop
from misli.gui.desktop.config import get_config

from misli.services.file_system_storage import FSStorageRepository

log = misli.get_logger(__name__)
signal.signal(signal.SIGINT, signal.SIG_DFL)


def main():
    # Init the app
    config = get_config()
    repo_path = config['repository_path']

    # Testing - restore repo changes
    for f in os.scandir(repo_path):
        if f.name.endswith('backup'):
            os.rename(f.path, f.path[:-7])

        if f.name.endswith('misl.json'):
            os.remove(f.path)

    if os.path.exists(repo_path):
        fs_repo = FSStorageRepository.open(repo_path)
    else:
        fs_repo = FSStorageRepository.create(repo_path)

    if not fs_repo:
        log.error('Error initializing repository. Exiting.')
        return

    misli.set_repo(fs_repo)
    misli.set_main_loop(QtMainLoop())
    misli.on_change(update_components_from_changes)
    misli.on_change(fs_repo.save_changes)

    misli.line_spacing_in_pixels = 20

    desktop_app = misli.gui.create_component('DesktopApp', parent_id='')
    usecases.new_browser_window_ensure_page()
    desktop_app.exec_()


if __name__ == '__main__':
    main()
